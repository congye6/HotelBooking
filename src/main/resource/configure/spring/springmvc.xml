<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
       	xmlns:context="http://www.springframework.org/schema/context"  
      	xmlns:mvc="http://www.springframework.org/schema/mvc"  
      	xmlns:aop="http://www.springframework.org/schema/aop"
      	xmlns:tx="http://www.springframework.org/schema/tx" 
       	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd  
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!--
		可以不配置，前端控制器会从DispatcherSerlvet.properties中加载处理器映射器、适配器、视图解析器等组件
		如果不在springmvc.xml中配置，使用默认加载的
	-->
	<!--
		使用这个可以代替下边注解处理器映射器和注解处理器适配器的配置
		而且默认加载很多的参数绑定方法，如json转换解析器
		实际开发中很多使用这个
	-->
	<!-- <mvc:annotation-driven/> -->
	
  	<!--
  		对于注解的Handler可以单个配置
  		可以不写id，因为在Handler中已经注解
  	-->
  	<!-- <bean class="controller.UserController3" /> -->
  	<!--
  		在实际开发中建议使用组件扫描
  		可以扫描Controller、service...默认扫描的注解类型是 @Component
  		这里扫描Controller，指定controller的包
  		对标记有Controller的类中标记有RequestMappering的方法进行映射，在RequestMapping中定义要映射的url
  		使用注解的映射器不用在xml中配置url和Handler的映射关系
  	-->
  	<!-- 对静态资源的映射 -->
    
  	
  	
  	<context:component-scan base-package="congye6.HotelBooking.controller" />
  	
    
	
	<!--
		配置视图解析器
		解析jsp视图，默认使用jstl标签，classpath下得有jstl的包
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /> -->
		<!-- 可以使用jsp路径的前缀和后缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" /> 
		
	</bean>
	
	<!-- spring mvc验证开始 ，若不使用这种配置，需要将错误信息硬编码到代码里，不易修改-->
    <!-- 默认的注解映射的支持 -->  
    <mvc:annotation-driven validator="validator" conversion-service="conversion-service" />
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="validatemessageSource"/>
    </bean>
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
    <bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basename" value="classpath:validatemessages"/>  
        <property name="fileEncodings" value="utf-8"/>  
        <property name="cacheSeconds" value="120"/>  
    </bean>
    <!-- spring mvc验证结束 -->
    
    <!--配置拦截器, 多个拦截器,顺序执行 -->  
	<mvc:interceptors>    
	    <mvc:interceptor>    
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
	        <mvc:mapping path="/" />  
	        <bean class="congye6.HotelBooking.interceptor.IndexInterceptor"></bean>    
	    </mvc:interceptor>  
	    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
	</mvc:interceptors>
	
	<bean class="congye6.HotelBooking.controller.index.IndexDispatcher"></bean>
	<!-- 全局异常处理器 -->
	<!--<bean  class="exception.CustomExceptionResolver"/>-->
</beans>     